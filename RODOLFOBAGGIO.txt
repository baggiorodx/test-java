Rodolfo Baggio
Solutions Architecture & Delivery | Business Consultancy | IT Strategy | Leadership | Tech Lead

baggio.rodolfo@gmail.com
https://www.linkedin.com/in/rodolfobaggio/
https://github.com/baggiorodx
https://www.instagram.com/baggiorodx/


------------------------------------------------------------------------------------------------------------------------------------------------
Bom, o codigo produzido foi um bom desafio, fazia 8 anos que eu n√£o codificava algo 'do zero', algumas coisas foram novidades. 
Decidi brincar um pouco com algumas coisas, existem alguns coment√°rios e algumas coisas incabadas, mas o requisitos foram cumpridos. 

Alguns pontos a ressaltar... 
1) Usar o Visual Studio Code, decidir para entender como funciona, sempre usei o Eclipe e NetBeans, e as vezes usava o JDeveloper
2) Spring boot do 'zero', o setup na empresa atual √© feito pelos desenvolvedores, sempre que preciso 'ajud√°-los' √© mais no aspecto da arquitetura
   e tamb√©m do ponto de vista de requirementos e regras de neg√≥cio. 
3) Tamb√©m decidi usar o Postman para alguns testes, sempre precisar criar ainda os testes pelo JUnit
4) Usar github dentro do Visual Studio tamb√©m foi uma boa brincadeira. 
5) N√£o tenho atuado muito como developer... 
6) Tenho 12 anos de experi√™ncia em varejo e supply chain em geral... considerem bem essa experi√™ncia. 

Obrigado pela oportunidade... 
------------------------------------------------------------------------------------------------------------------------------------------------

https://github.com/belezanaweb/test-java
https://github.com/baggiorodx/test-java

[Done] Crie endpoints para as seguintes a√ß√µes:
[Done]  - Cria√ß√£o de produto onde o payload ser√° o json informado acima (exceto as propriedades isMarketable e inventory.quantity)
[Done]  - Edi√ß√£o de produto por sku
[Done]  - Recupera√ß√£o de produto por sku
[Done]  - Dele√ß√£o de produto por sku

[Done] Requisitos
[Done]  - Toda vez que um produto for recuperado por sku dever√° ser calculado a propriedade: inventory.quantity
[Done]  - A propriedade inventory.quantity √© a soma da quantity dos warehouses; Toda vez que um produto for recuperado por sku dever√° ser calculado a propriedade: isMarketable
[Done]  - Um produto √© marketable sempre que seu inventory.quantity for maior que 0; Caso um produto j√° existente em mem√≥ria tente ser criado com o mesmo sku uma exce√ß√£o dever√° ser lan√ßada
[Done]  - Dois produtos s√£o considerados iguais se os seus skus forem iguais;  Ao atualizar um produto, o antigo deve ser sobrescrito com o que esta sendo enviado na requisi√ß√£o
[Done]  - A requisi√ß√£o deve receber o sku e atualizar com o produto que tbm esta vindo na requisi√ß√£o

[Almost Done] Dicas
[Done]  - Os produtos devem ficar em mem√≥ria, n√£o √© necess√°rio persistir os dados. N√£o utilize h2
[Done]  - N√£o √© necess√°rio adicionar swagger (n√£o ser√° avaliado)
[Too much for me now :) Gimme 2 days and see the results...] 
        - Sinta-se a vontade para fazer o c√≥digo em groovy, kotlin ou scala se preferir, utilizamos bastante aqui
[Doing] - Testes s√£o sempre bem-vindos üòÉ

